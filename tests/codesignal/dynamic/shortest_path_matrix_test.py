import pytest

from src.codesignal.dynamic.shortest_path_matrix import solution


@pytest.mark.parametrize(
    "matrix, start, end, expected",
    [
        ([[1, 1, 1], [0, 1, 0], [1, 1, 1]], (0, 0), (2, 2), 4),
        ([[1, 1, 0], [0, 1, 0], [1, 1, 1]], (0, 0), (0, 1), 1),
        ([[1, 0], [1, 1]], (0, 0), (1, 1), 2),
        ([[1, 1], [1, 1]], (0, 0), (1, 0), 1),
        ([[0, 1], [1, 1]], (0, 1), (1, 0), 2),
        ([[0, 0], [0, 0]], (0, 0), (1, 1), 0),
        ([[1]], (0, 0), (0, 0), 0),
        (
            [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],
            (0, 0),
            (2, 4),
            6,
        ),
        ([[0, 1], [1, 0]], (0, 1), (1, 0), 0),
        ([[0, 1], [0, 1]], (0, 1), (1, 1), 1),
        ([[1, 1, 1], [0, 0, 1], [1, 1, 1]], (0, 0), (2, 2), 4),
        ([[1, 0], [1, 1]], (1, 0), (0, 0), 1),
        (
            [[1, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 0]],
            (0, 0),
            (2, 4),
            0,
        ),
    ],
)
def test_bfs_matrix(matrix, start, end, expected):
    assert solution(matrix, start, end) == expected
