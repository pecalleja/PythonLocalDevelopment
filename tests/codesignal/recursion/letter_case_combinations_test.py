import pytest

from src.codesignal.recursion.letter_case_combinations import solution

test_cases = [
    ("a1b2", ["a1b2", "a1B2", "A1b2", "A1B2"]),
    ("3y4", ["3y4", "3Y4"]),
    ("5Z", ['5z', '5Z']),
    ("Pp", ['pp', 'pP', 'Pp', 'PP']),
    ("zz", ['zz', 'zZ', 'Zz', 'ZZ']),
    ("A", ['a', 'A']),
    ("BCd", ['bcd', 'bcD', 'bCd', 'bCD', 'Bcd', 'BcD', 'BCd', 'BCD']),
    ("1eg1", ['1eg1', '1eG1', '1Eg1', '1EG1']),
    (
        "tUIp9",
        [
            'tuip9',
            'tuiP9',
            'tuIp9',
            'tuIP9',
            'tUip9',
            'tUiP9',
            'tUIp9',
            'tUIP9',
            'Tuip9',
            'TuiP9',
            'TuIp9',
            'TuIP9',
            'TUip9',
            'TUiP9',
            'TUIp9',
            'TUIP9',
        ],
    ),
    (
        "oP2N4c",
        [
            'op2n4c',
            'op2n4C',
            'op2N4c',
            'op2N4C',
            'oP2n4c',
            'oP2n4C',
            'oP2N4c',
            'oP2N4C',
            'Op2n4c',
            'Op2n4C',
            'Op2N4c',
            'Op2N4C',
            'OP2n4c',
            'OP2n4C',
            'OP2N4c',
            'OP2N4C',
        ],
    ),
    (
        "K7L8S6j",
        [
            'k7l8s6j',
            'k7l8s6J',
            'k7l8S6j',
            'k7l8S6J',
            'k7L8s6j',
            'k7L8s6J',
            'k7L8S6j',
            'k7L8S6J',
            'K7l8s6j',
            'K7l8s6J',
            'K7l8S6j',
            'K7l8S6J',
            'K7L8s6j',
            'K7L8s6J',
            'K7L8S6j',
            'K7L8S6J',
        ],
    ),
    (
        "N5m7J9",
        [
            'n5m7j9',
            'n5m7J9',
            'n5M7j9',
            'n5M7J9',
            'N5m7j9',
            'N5m7J9',
            'N5M7j9',
            'N5M7J9',
        ],
    ),
    (
        "X2Yz5",
        [
            'x2yz5',
            'x2yZ5',
            'x2Yz5',
            'x2YZ5',
            'X2yz5',
            'X2yZ5',
            'X2Yz5',
            'X2YZ5',
        ],
    ),
    (
        "qW3E5r",
        [
            'qw3e5r',
            'qw3e5R',
            'qw3E5r',
            'qw3E5R',
            'qW3e5r',
            'qW3e5R',
            'qW3E5r',
            'qW3E5R',
            'Qw3e5r',
            'Qw3e5R',
            'Qw3E5r',
            'Qw3E5R',
            'QW3e5r',
            'QW3e5R',
            'QW3E5r',
            'QW3E5R',
        ],
    ),
    (
        "T6y7U8",
        [
            't6y7u8',
            't6y7U8',
            't6Y7u8',
            't6Y7U8',
            'T6y7u8',
            'T6y7U8',
            'T6Y7u8',
            'T6Y7U8',
        ],
    ),
    (
        "i4O6U8",
        [
            'i4o6u8',
            'i4o6U8',
            'i4O6u8',
            'i4O6U8',
            'I4o6u8',
            'I4o6U8',
            'I4O6u8',
            'I4O6U8',
        ],
    ),
    (
        "F5g7H9",
        [
            'f5g7h9',
            'f5g7H9',
            'f5G7h9',
            'f5G7H9',
            'F5g7h9',
            'F5g7H9',
            'F5G7h9',
            'F5G7H9',
        ],
    ),
]


@pytest.mark.parametrize("input_str, expected", test_cases)
def test_generate_case_combinations(input_str, expected):
    assert sorted(solution(input_str)) == sorted(expected)
